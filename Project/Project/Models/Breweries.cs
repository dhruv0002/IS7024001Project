// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
// using Breweries;
//
// var breweryCollection = BreweryCollection.FromJson(jsonString);



namespace Breweries
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;



    public partial class BreweryCollection
    {
        [JsonProperty("id")]
        public string Id { get; set; }



        [JsonProperty("name")]
        public string Name { get; set; }


        [DisplayName("Brewery Type")]
        [JsonProperty("brewery_type")]
        public string BreweryType { get; set; }



        [JsonProperty("street")]
        public string Street { get; set; }



        [JsonProperty("address_2")]
        public object Address2 { get; set; }



        [JsonProperty("address_3")]
        public object Address3 { get; set; }



        [JsonProperty("city")]
        public string City { get; set; }



        [JsonProperty("state")]
        public string State { get; set; }


        [DisplayName("County Province")]
        [JsonProperty("county_province")]
        public object CountyProvince { get; set; }


        [DisplayName("Postal Code")]
        [JsonProperty("postal_code")]
        public string PostalCode { get; set; }



        [JsonProperty("country")]
        public string Country { get; set; }



        [JsonProperty("longitude")]
        public string Longitude { get; set; }



        [JsonProperty("latitude")]
        public string Latitude { get; set; }



        [JsonProperty("phone")]
        public string Phone { get; set; }


        [DisplayName("Website Url")]
        [JsonProperty("website_url")]
        public object WebsiteUrl { get; set; }



        [JsonProperty("updated_at")]
        public DateTimeOffset UpdatedAt { get; set; }



        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }
    }



    public partial class BreweryCollection
    {
        public static List<BreweryCollection> FromJson(string json) => JsonConvert.DeserializeObject<List<BreweryCollection>>(json, Breweries.Converter.Settings);
    }



    public static class Serialize
    {
        public static string ToJson(this List<BreweryCollection> self) => JsonConvert.SerializeObject(self, Breweries.Converter.Settings);
    }



    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
{
new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
},
        };
    }
}